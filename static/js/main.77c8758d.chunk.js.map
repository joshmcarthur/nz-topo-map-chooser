{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","mapClicked","bind","assertThisInitialized","_this2","loc","_ref","latlng","map","panTo","fetch","concat","lng","lat","then","r","json","data","setState","topo50","vectorQuery","layers","features","properties","topo250","namespace","format","feature","versionMatches","exec","edition","fileNamespace","formatRef","version","replace","filename","sheet_code","document","querySelector","showModal","topoTiles","tileLayer","attribution","maxZoom","minZoom","Map","mapRef","center","zoom","zoomControl","maxBounds","addControl","control","position","on","_this3","_this$state","topo50Data","topo250Data","sidebar","about","react_default","a","createElement","Fragment","href","sheet_name","className","buildUrl","onClick","id","close","ref","el","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.77c8758d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { control, Map, tileLayer } from \"leaflet\";\nimport \"./App.css\";\nimport 'leaflet/dist/leaflet.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.mapClicked = this.mapClicked.bind(this);\n  }\n  mapClicked({ latlng: loc }) {\n    this.map.panTo(loc);\n    fetch(`https://data.linz.govt.nz/services/query/v1/vector.json?key=2269dc5590604b2c8cedec1fe70a04cb&layer=50295&x=${loc.lng}&y=${loc.lat}&max_results=1&radius=10000`)\n      .then(r => r.json())\n      .then(data => this.setState({ topo50: data.vectorQuery.layers[50295].features[0] && data.vectorQuery.layers[50295].features[0].properties }));\n    fetch(`https://data.linz.govt.nz/services/query/v1/vector.json?key=2269dc5590604b2c8cedec1fe70a04cb&layer=50169&x=${loc.lng}&y=${loc.lat}&max_results=1&radius=10000`)\n      .then(r => r.json())\n      .then(data => this.setState({ topo250: data.vectorQuery.layers[50169].features[0] && data.vectorQuery.layers[50169].features[0].properties }));\n  }\n  buildUrl(namespace, format, feature) {\n    const versionMatches = /^Edition ([\\d.]+) .+/.exec(feature.edition);\n    const fileNamespace = namespace === \"Topo250\" ? \"250-\" : \"\";\n    let formatRef = format === \"GeoTIFF\" ? \"GeoTif\" : \"TIFF\";\n    if (namespace === \"Topo250\" && format === \"GeoTIFF\") formatRef += \"f\"; // Topo250 adjustment\n    const version = `v${versionMatches[1]}`.replace(\".\", \"-\");\n    const filename = `${fileNamespace}${feature.sheet_code}_${formatRef}${version}.tif`\n    return `http://topo.linz.govt.nz/${namespace}_raster_images/${format}${namespace}/${filename}`\n  }\n  componentDidMount() {\n    document.querySelector(\"#about\").showModal();\n    const topoTiles = tileLayer(\n      'http://tiles-a.data-cdn.linz.govt.nz/services;key=2269dc5590604b2c8cedec1fe70a04cb/tiles/v4/layer=50767/EPSG:3857/{z}/{x}/{y}.png',\n      {\n        attribution: \"CC BY 4.0 Land Information New Zealand\",\n        maxZoom: 16,\n        minZoom: 6\n      });\n    this.map = new Map(this.mapRef, {\n      center: [-42, 172],\n      zoom: 6,\n      zoomControl: false,\n      maxBounds: [[-46.641235447, 160], [-34.4506617165, 178.517093541]],\n      layers: [topoTiles]\n    });\n    this.map.addControl(control.zoom({ position: 'bottomright' }));\n    this.map.on(\"click\", this.mapClicked);\n  }\n  render() {\n    const { topo50, topo250 } = this.state;\n    let topo50Data = null;\n    let topo250Data = null;\n    let sidebar = null;\n    const about = <React.Fragment>\n      <p>\n        This is a simple tool to find the appropriate Topo50 and\n        Topo250 map for the area of New Zealand you are interested in.\n      </p>\n\n      <p>\n        Click anywhere in the country to see links to the maps that cover\n      that area.\n      </p>\n\n      <p>\n        Created by <a href=\"https://joshmcarthur.com\">Josh McArthur</a>,\n        in Wellington, New Zealand. This application uses open data available from\n        the LINZ data service: <a href=\"https://data.linz.govt.nz\">https://data.linz.govt.nz</a>.\n      </p>\n    </React.Fragment>\n\n    if (topo50) {\n      topo50Data = (\n        <React.Fragment>\n          <h1>Topo50 {topo50.sheet_code}<small>{topo50.sheet_name}</small></h1>\n          <dl className=\"formatList\">\n            <dt>GeoTIFF</dt>\n            <dd><a href={this.buildUrl(\"Topo50\", \"GeoTIFF\", topo50)}>Download in GeoTIFF format</a></dd>\n            {/* Georeferenced map image, including metadata such as coordinate system and bounds.\n              This format does not include a map legend. The legend is separately available.<br></br>\n              This format is suitable for composition of new map extents or partial presentation\n              (digital presentations, visualisations, etc).<br />\n              Geo data can also be downloaded from the <a href=\"https://data.linz.govt.nz\">LINZ Data Service</a> which\n              offers better map viewing and custom cropping than\n              transforming the GeoTIFF image directly. */}\n            <dt>TIFF</dt>\n            <dd><a href={this.buildUrl(\"Topo50\", \"TIFF\", topo50)}>Download in TIFF format</a></dd>\n            {/* <dd>\n              Full map including the legend. Map does not contain geo metadata\n              such as the bounds and coordinate system.<br></br>\n              This format can be used for printing and standalone presentation.\n            </dd> */}\n\n            <dt>Map Legend</dt>\n            <dd>\n              <a href=\"https://www.linz.govt.nz/topography/topo-maps/topo50/digital-images/topo50-important-info/topo50-legend.tif\">Download TIFF</a>\n              <br />\n              Map legend common to all Topo50 maps.\n            </dd>\n          </dl>\n        </React.Fragment>\n      );\n    }\n\n    if (topo250) {\n      topo250Data = (\n        <React.Fragment>\n          <h1>Topo250 {topo250.sheet_code}<small>{topo250.sheet_name}</small></h1>\n          <dl className=\"formatList\">\n            <dt>GeoTIFF</dt>\n            <dd><a href={this.buildUrl(\"Topo250\", \"GeoTIFF\", topo250)}>Download in GeoTIFF format</a></dd>\n            <dt>TIFF</dt>\n            <dd><a href={this.buildUrl(\"Topo250\", \"TIFF\", topo250)}>Download in GeoTIFF format</a></dd>\n            <dt>Map Legend</dt>\n            <dd>\n              <a href=\"https://www.linz.govt.nz/topography/topo-maps/topo250/digital-images/topo250-important-info/topo250-legend.tif\">Download TIFF</a>\n              <br />\n              Map legend common to all Topo50 maps.\n            </dd>\n          </dl>\n        </React.Fragment>\n      );\n    }\n\n    if (topo50Data || topo250Data) {\n      sidebar = (\n        <div className=\"mapData\">\n          <span onClick={() => this.setState({ topo50: null, topo250: null })} className=\"close\">&times;</span>\n          {topo50Data}\n          {topo250Data}\n          <footer>{about}</footer>\n        </div>\n      );\n    };\n\n    return (\n      <React.Fragment>\n        {sidebar}\n        <dialog id=\"about\">\n          <span onClick={() => document.querySelector(\"#about\").close()} className=\"close\">&times;</span>\n          {about}\n        </dialog>\n        <div id=\"map\" ref={el => this.mapRef = el}></div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}